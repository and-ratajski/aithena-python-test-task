"""Example usage of the LLM clients.

This module provides examples of how to use the different LLM client implementations
that conform to the LlmClient Protocol.
"""

import os
from typing import Optional

from src.llm.protocols import LlmClient
from src.llm import AnthropicClient, OpenAIClient


def process_with_any_llm(client: LlmClient, prompt: str, system_prompt: Optional[str] = None) -> str:
    """Process a prompt with any LlmClient implementation.
    
    This function demonstrates how the Protocol allows for dependency injection
    and interchangeable use of different implementations.
    
    Args:
        client: Any implementation of the LlmClient Protocol
        prompt: The prompt to send to the LLM
        system_prompt: Optional system prompt
        
    Returns:
        The generated response
    """
    return client.generate_response(prompt, system_prompt)


def convert_to_rust(client: LlmClient, python_code: str) -> str:
    """Convert Python code to Rust using any LlmClient implementation.
    
    Args:
        client: Any implementation of the LlmClient Protocol
        python_code: Python code to convert
        
    Returns:
        Equivalent Rust code
    """
    return client.rewrite_to_rust(python_code)


# Example of how the protocol enables easy switching between implementations
def main() -> None:
    """Example of using different LLM clients with the same interface."""
    # Get the default LLM provider from environment or use fallback
    provider = os.getenv("LLM_PROVIDER", "anthropic")
    
    # Create a client based on the provider
    client = get_llm_client(provider)
    
    # Process a prompt with the selected client
    response = process_with_any_llm(
        client,
        "Explain the Dependency Inversion Principle in one sentence.",
        "You are a software engineering expert."
    )
    
    print(f"Response from {provider} client:")
    print(response)
    print("\n" + "="*50 + "\n")
    
    # Example Python code to convert to Rust
    python_code = """
def factorial(n: int) -> int:
    if n <= 1:
        return 1
    return n * factorial(n - 1)
    """
    
    rust_code = convert_to_rust(client, python_code)
    
    print(f"Rust code generated by {provider} client:")
    print(rust_code)


if __name__ == "__main__":
    main()